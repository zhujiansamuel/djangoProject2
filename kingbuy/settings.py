"""
Django settings for kingbuy project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
import django_cache_url
from .utils import get_bool_from_env,get_list
from django_prices.utils.formatting import get_currency_fraction
from django.utils.translation import gettext_lazy as _, pgettext_lazy
import dj_email_url



DEFAULT_COUNTRY = os.environ.get( "DEFAULT_COUNTRY", "JP" )

# DEFAULT_CURRENCY = os.environ.get("DEFAULT_CURRENCY", "USD")
DEFAULT_CURRENCY = os.environ.get( "DEFAULT_CURRENCY", "JPY" )

DEFAULT_DECIMAL_PLACES = get_currency_fraction( DEFAULT_CURRENCY )
DEFAULT_MAX_DIGITS = 12
DEFAULT_CURRENCY_CODE_LENGTH = 3


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

REDIS_URL = os.environ.get( "REDIS_URL" )
if REDIS_URL:
    CACHE_URL = os.environ.setdefault( "CACHE_URL", REDIS_URL )
CACHES = { "default": django_cache_url.config() }


PROJECT_ROOT = os.path.normpath( os.path.join( os.path.dirname( __file__ ), ".." ) )

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-zrw-3w+676&kvh71(d$7avl4b1ja997)09(o7-3jov)valquc^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool_from_env( "DEBUG", True )


ALLOWED_HOSTS = []
ALLOWED_CLIENT_HOSTS = get_list(
    os.environ.get( "ALLOWED_CLIENT_HOSTS", "*" )
    )

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "storages",
    "simple_svg",
    'sass_processor',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.postgres",
    "django.contrib.sites",
    "django.forms",

    "kingbuy.core",
    "kingbuy.account",
    "kingbuy.product_stock",

    "django_prices",
    "django_prices_openexchangerates",
    "django_prices_vatlayer",
    "graphene_django",
    "django_countries",
    "django_filters",
    'crispy_forms',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = 'kingbuy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2'
        ,
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            # 'environment': 'core.jinja2.environment',
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kingbuy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'kingbuy',
        'USER': 'kingbuy',
        'PASSWORD': 'samuel201001',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/


TIME_ZONE = "Asia/Tokyo"
LANGUAGE_CODE = "ja"
LANGUAGES = [
    # ("en", _("English")),
    ("ja", _( "Japanese" )),
    # ("zh-hans", _("Simplified Chinese")),
    # ("zh-hant", _("Traditional Chinese")),
    ]
LOCALE_PATHS = [os.path.join( PROJECT_ROOT, "locale" )]
USE_I18N = True
USE_L10N = True
USE_TZ = True





FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

EMAIL_URL = os.environ.get( "EMAIL_URL" )
SENDGRID_USERNAME = os.environ.get( "SENDGRID_USERNAME" )
SENDGRID_PASSWORD = os.environ.get( "SENDGRID_PASSWORD" )
if not EMAIL_URL and SENDGRID_USERNAME and SENDGRID_PASSWORD:
    EMAIL_URL = "smtp://%s:%s@smtp.sendgrid.net:587/?tls=True" % (
        SENDGRID_USERNAME,
        SENDGRID_PASSWORD,
        )
email_config = dj_email_url.parse(
    EMAIL_URL or "console://demo@example.com:console@example/"
    )


EMAIL_FILE_PATH = ''
EMAIL_HOST_USER = 'kingbuy.vida.feliz@gmail.com'
EMAIL_HOST_PASSWORD = 'AbwoCuZiewBfzdEtDLGw6CUf'
EMAIL_HOST = 'smtp.googlemail.com'
EMAIL_PORT = 587
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

ENABLE_SSL = get_bool_from_env( "ENABLE_SSL", False )

if ENABLE_SSL:
    SECURE_SSL_REDIRECT = not DEBUG

DEFAULT_FROM_EMAIL = os.environ.get( "DEFAULT_FROM_EMAIL", EMAIL_HOST_USER )



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_ROOT = os.path.join( PROJECT_ROOT, "static" )
STATIC_URL = os.environ.get( "STATIC_URL", "/static/" )
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'sass_processor.finders.CssFinder',
    ]


SASS_PROCESSOR_INCLUDE_DIRS = [
    os.path.join(PROJECT_ROOT, 'static/sass/materialize.scss'),
]


SASS_PRECISION = 8
SASS_OUTPUT_STYLE = 'compact'

from kingbuy.core.jinja2 import environment

COMPRESS_JINJA2_GET_ENVIRONMENT = environment

loaders = [
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
    ]

context_processors = [
    "django.contrib.auth.context_processors.auth",
    "django.template.context_processors.debug",
    "django.template.context_processors.i18n",
    "django.template.context_processors.media",
    "django.template.context_processors.static",
    "django.template.context_processors.tz",
    "django.contrib.messages.context_processors.messages",
    "django.template.context_processors.request",

    ]


if not DEBUG:
    loaders = [("django.template.loaders.cached.Loader", loaders)]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join( PROJECT_ROOT, "templates" )],
        "OPTIONS": {
            "debug": DEBUG,
            "context_processors": context_processors,
            "loaders": loaders,
            "string_if_invalid": '<<Missing:"%s">>' if DEBUG else "==",
            },
        }
    ]





ALLOWED_HOSTS = get_list( os.environ.get( "ALLOWED_HOSTS", "*" ) )

ALLOWED_GRAPHQL_ORIGINS = os.environ.get( "ALLOWED_GRAPHQL_ORIGINS", "*" )

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")







# Amazon S3 configuration
# AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_ACCESS_KEY_ID = "AKIA2ZHFFHS4U5VXU4QX"

AWS_LOCATION = os.environ.get( "AWS_LOCATION", "" )

# AWS_MEDIA_BUCKET_NAME = os.environ.get("AWS_MEDIA_BUCKET_NAME")
AWS_MEDIA_BUCKET_NAME = "tempsiteforsam"

# AWS_MEDIA_CUSTOM_DOMAIN = os.environ.get("AWS_MEDIA_CUSTOM_DOMAIN")
AWS_MEDIA_CUSTOM_DOMAIN = "tempsiteforsam.s3.ap-northeast-1.amazonaws.com"

AWS_QUERYSTRING_AUTH = get_bool_from_env( "AWS_QUERYSTRING_AUTH", False )

AWS_S3_CUSTOM_DOMAIN = os.environ.get( "AWS_STATIC_CUSTOM_DOMAIN" )
AWS_S3_ENDPOINT_URL = os.environ.get( "AWS_S3_ENDPOINT_URL", None )

# AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = "PP1jwhz/91OyKsI//mdAKJOT6bLSmd1dZi2rWGbi"

AWS_STORAGE_BUCKET_NAME = os.environ.get( "AWS_STORAGE_BUCKET_NAME" )
AWS_DEFAULT_ACL = os.environ.get( "AWS_DEFAULT_ACL", None )


if AWS_STORAGE_BUCKET_NAME:
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

if AWS_MEDIA_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = "core.storages.S3MediaStorage"
    THUMBNAIL_DEFAULT_STORAGE = DEFAULT_FILE_STORAGE


MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"



# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": { "level": "INFO", "handlers": ["console"] },
    "formatters": {
        "verbose": {
            "format": (
                "%(levelname)s %(name)s %(message)s [PID:%(process)d:%(threadName)s]"
            )
            },

        "simple": { "format": "%(levelname)s %(message)s" },
        },
    "filters": {
        "require_debug_false": { "()": "django.utils.log.RequireDebugFalse" } },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            },
        },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "propagate": True,
            },
        "django.server": { "handlers": ["console"], "level": "INFO",
                           "propagate": True },
        "saleor": { "handlers": ["console"], "level": "DEBUG", "propagate": True },
        },
    }



# CELERY SETTINGS
CELERY_BROKER_URL = (
        os.environ.get( "CELERY_BROKER_URL", os.environ.get( "CLOUDAMQP_URL" ) ) or ""
)
CELERY_TASK_ALWAYS_EAGER = not CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_RESULT_BACKEND = os.environ.get( "CELERY_RESULT_BACKEND", None )


# Rich-text editor
ALLOWED_TAGS = [
    "a",
    "b",
    "blockquote",
    "br",
    "em",
    "h2",
    "h3",
    "i",
    "images",
    "li",
    "ol",
    "p",
    "strong",
    "ul",
    ]
ALLOWED_ATTRIBUTES = { "*": ["align", "style"], "a": ["href", "title"],
                       "images": ["src"] }
ALLOWED_STYLES = ["text-align"]




GRAPHENE = {
    "RELAY_CONNECTION_ENFORCE_FIRST_OR_LAST": True,
    "RELAY_CONNECTION_MAX_LIMIT": 100,
    }


AVAILABLE_CURRENCIES = [DEFAULT_CURRENCY]

LOW_STOCK_THRESHOLD = 10
MAX_CHECKOUT_LINE_QUANTITY = int( os.environ.get( "MAX_CHECKOUT_LINE_QUANTITY", 50 ) )

AUTH_USER_MODEL = "account.User"
LOGIN_URL = "/account/login/"
LOGIN_REDIRECT_URL = '/index/'

SITE_ID = 1


PAGINATE_BY = 16
DASHBOARD_PAGINATE_BY = 30
DASHBOARD_SEARCH_LIMIT = 5